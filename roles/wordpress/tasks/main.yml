---
- name: Check if Composer is installed
  stat: path=~/bin/composer
  register: composer

- name: Download Composer installer
  get_url: url=https://getcomposer.org/installer dest=~/ansible-composer-setup.php
  when: composer.stat.exists == False

- name: Install Composer
  shell: php ~/ansible-composer-setup.php --install-dir=$HOME/bin --filename=composer
  when: composer.stat.exists == False

- name: Remove Composer installer
  file: path=~/ansible-composer-setup.php state=absent

- name: Create cron job for ~/bin/composer self-update
  cron:
    name: composer self-update
    job: ~/bin/composer -q -n self-update
    special_time: daily

- name: Download WP-CLI
  get_url: url=https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar dest=~/bin/wp force=no

- name: Make WP-CLI executable
  file:
    path: ~/bin/wp
    mode: ugo+x

- name: Install some WP-CLI packages
  shell: ~/bin/wp package install {{ item }}
  args:
    creates: ~/.wp-cli/packages/vendor/{{ item }}
  with_items:
    - aaemnnosttv/wp-cli-dotenv-command:^0.2

- name: Create cron job for ~/bin/wp cli update
  cron:
    name: WP-CLI self-update
    job: ~/bin/wp cli update --yes --quiet
    special_time: daily


- name: Clone fresh Bedrock (WordPress boilerplate)
  git:
    repo: "{{ item.bedrock_repo }}"
    dest: /var/www/virtual/{{ ansible_user }}/wordpress/{{ item.name }}
    force: yes
  with_items: '{{ wordpress_instances }}'

- name: Create MySQL database(s)
  mysql_db:
    name: "{{ ansible_user }}_{{ item.name }}"
    collation: utf8_unicode_ci
    encoding: utf8
    state: present
  with_items: '{{ wordpress_instances }}'

- name: Create .env template with salts
  shell: ~/bin/wp dotenv init --with-salts
  args:
    chdir: /var/www/virtual/{{ ansible_user }}/wordpress/{{ item.name }}
  ignore_errors: yes
  register: result
  changed_when: "'already exists' not in result.stdout"
  with_items: '{{ wordpress_instances }}'

- name: Read MySQL database password from ~/.my.cnf
  shell: sed -n -e '/\[client\]/,$p' ~/.my.cnf | grep password | head -1 | cut -d= -f2 | cut -d " " -f1 warn=no
  register: database_password
  changed_when: False

- name: Set environment variables in .env
  shell: "~/bin/wp dotenv set DB_NAME    {{ ansible_user }}_{{ item.name }}; \
         ~/bin/wp dotenv set DB_USER     {{ ansible_user }}; \
         ~/bin/wp dotenv set DB_PASSWORD {{ database_password.stdout }}; \
         ~/bin/wp dotenv set WP_ENV      production; \
         ~/bin/wp dotenv set WP_HOME     https://{{ item.domains[0] }}; \
         ~/bin/wp dotenv set WP_SITEURL  ${WP_HOME}/wp"
  args:
    chdir: /var/www/virtual/{{ ansible_user }}/wordpress/{{ item.name }}
  with_items: '{{ wordpress_instances }}'

- name: Create script ~/bin/wordpress-update
  template:
    src: templates/wordpress-update.j2
    dest: ~/bin/wordpress-update
    mode: ugo+x

- name: Create runwhen jobs for ~/bin/wordpress-update
  shell: 'runwhen-conf ~/etc/run-wordpress-update-{{ item.name }} ~/bin/wordpress-update {{ item.name }}'
  args:
    creates: '~/etc/run-wordpress-update-{{ item.name }}/run'
  with_items: '{{ wordpress_instances }}'

- name: Configure runwhen jobs for ~/bin/wordpress-update
  lineinfile:
  args:
    dest: ~/etc/run-wordpress-update-{{ item.name }}/run
    regexp: '^RUNWHEN='
    line: 'RUNWHEN=",H=1"'
  with_items: '{{ wordpress_instances }}'

- name: Activate runwhen jobs for ~/bin/wordpress-update
  file:
    path: '~/service/wordpress-update-{{ item.name }}'
    src: '~/etc/run-wordpress-update-{{ item.name }}'
    state: link
  with_items: '{{ wordpress_instances }}'

- name: Run wordpress-update for the first time
  shell: 'svc -a ~/service/wordpress-update-{{ item.name }}'
  with_items: '{{ wordpress_instances }}'

- name: Create webhook for WordPress updates
  template:
    src: templates/wordpress-update.cgi.j2
    dest: "~/cgi-bin/wordpress-update-{{ item.name }}.cgi"
    mode: 0755
  when: '{{ item.webhook_key is defined }}'
  with_items: '{{ wordpress_instances }}'

- name: Set up .htaccess to redirect all traffic to main domain
  blockinfile:
    dest: /var/www/virtual/{{ ansible_user }}/wordpress/{{ item.name }}/web/.htaccess
    create: yes
    insertbefore: BOF
    block: |
      RewriteEngine On
      RewriteCond %{HTTP_HOST} !={{ item.domains[0] }}
      RewriteRule (.*) https://{{ item.domains[0] }}/$1 [R=301,L]
  with_items: '{{ wordpress_instances }}'

- name: Create domain symlinks for wordpresses
  file:
    path: /var/www/virtual/{{ ansible_user }}/{{ item.1 }}
    src: /var/www/virtual/{{ ansible_user }}/wordpress/{{ item.0.name }}/web
    state: link
  with_subelements:
    - "{{ wordpress_instances }}"
    - domains
